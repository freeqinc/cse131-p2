int intVar = 5;
float floatVar = 5.5;
bool boolVar = true;

const int intConst = 10;
const float floatConst = 99.9;
const bool boolConst = false;



// struct business!
structdef TEST {
    int x;
    int y;
    int x; // check13a_Struct dup id x, error #1
    int z;
    int x; // check13a_Struct dup id x, error #2
    TEST * nextTest;
    function : void y() {} // check13a_Struct dup id y, error #3
    function : void f( int &x ) { // No error with x (inner scope)
        x = x + 1;
    }
    function : void foo() {}
    function : void foo() {} // error9_Decl dup overload, error #4
    function : void bar() {}
    function : void bar(int x) {} // OK, since legal overload
    function : int bar(int &x) { return 5; }
    function : int baz() { return intConst; }
    function : void mys() {}
};

structdef MYS {
    int x;
    int y;
    int x; // check13a_Struct dup id x, error #1
    int z;
    int x; // check13a_Struct dup id x, error #2
    int arr[5];
    TEST * nextTest;
    MYS * next; // recursive field – no error – will be tested
    ASDF * poop;
    function : void y() {} // check13a_Struct dup id y, error #3
    function : void f( int &x ) { // No error with x (inner scope)
        x = x + 1;
    }
    function : void foo() {}
    function : void foo() {} // error9_Decl dup overload, error #4
    function : void bar() {}
    function : void bar(int x) {} // OK, since legal overload
    function : int baz() { return intConst; }
    function : void mys() {}
    function : void x() { return 5; }
    function : int asdgag() { return 5.5; }
};

structdef MYS5 {
    int x;
    int y;
    MYS5() { // Ctor
         this.x = 0;
         this.y = 0;
         this = nullptr; // Error, not modifiable l-val
         this.x = this; // Error, MYS5 not assignable to int
         this = 5;
    }
    MYS5(int x, int y) { // Ctor
         this.x = x;
         this.y = y;
    }
    function : void foo() {
         this.x = 8;
         this.y = this.x;
         this.foo(); // Legal, recursive call
         this.bar(); // not exists yet
    }
    function : void bar() {
         this.foo(); // Legal, calling other struct function
         this.bar(); // good to go
         this.zoo();
         this.foo(5);
    }
};

structdef MYS {
    int x;
};

structdef MYS {
    int x;
};

structdef MYS {
    int x;
};

structdef TEST {
    int x;
};


structdef MYS2 {
    int x;
    MYS2() { return; } // ctor – no error
    MYS2(int x) {} // OK, legal overload – no error
    MYS2(float x) {} // OK, legal overload – no error
    MYS2(float & x) { return 5; }
    MYS2( float & x) {}
    ~MYS2() {} // dtor – no error
    ~MYS2() {} // DUPE son
    FOO() {} // error13b_Ctor - name does not match struct
    ~BAR() {} // error13b_Dtor - name does not match struct
    MYS2() {} // error9_Decl – dup overload
    MYS2(int y) {} // error9_Decl – dup overload
    ~MYS2() {} // error9_Decl – dup overload
};


function : int & testRet() { int x = 5; return x; }
function : int & testRet2() { return 5; }


structdef MYS_A {
    int x;
}; // Your compiler will implicitly add default ctor in this case

structdef MYS_B {
    int x;
    MYS_B(float x) {}
};

structdef MYS_C {
    int x;
    MYS_C() {} // Explicit default ctor defined
    MYS_C(int & x) {}
    MYS_C(int x, float y) {}
};

// Global instantiations
MYS_ZZZ a0; // doesn't exist
MYS_A a1; // OK – matches default ctor
MYS_A a2 : (); // OK – matches default ctor
MYS_A a3 : (1, 2); // error5n_Call – implicit 2 arg call, 0 param
MYS_A a4[5][1]; // OK – matches default ctor
MYS_A a5[5] : (); // OK – matches default ctor
MYS_A a6 : (2);
MYS_A a6;


structdef CALL {
    int a;
    float b;
    bool c;
    int d[5];
    CALL * next;
    CALL(int i) {}
    ~CALL() {}
    function : int & foo() { return 5; }
    function : void bar(bool b) {}
    function : float baz(int i) { return 5.5; }
};

function : void main() {

    s0.a = 5;
    s0.a;

    int s0 = 5;
    s0.a = 5;
    s0.a;

    int s00[5];
    s00.a = 5++;
    s00.a;

    CALL s1;

    // bad ones
    s1.a2 = 5;
    s1.a2();
    s1.a2(true, true);

    // good ones
    CALL s1Arr[5];

    s1.a = 5;
    s1.b = 5;
    s1.b = 5.5;
    s1.c = true;
    s1.a = true;
    s1.foo();
    s1.foo(5);
    s1.foo() = 5;
    s1.bar(true);
    s1.baz(5.5);
    s1.baz(5, 5);
    s1.baz(5) = 5;
    float poo = s1.baz(5);
    s1.d[0] = 5;
    s1.d = 5;
    s1.d[0] = s1;
    s1Arr[0] = s1;
    s1Arr[0] = 5;

    testRet() = 10;

    TEST testStruct;
    MYS mysStruct;
    mysStruct.x = 5;
    mysStruct.x++;


    // Local instantiations
    MYS_B b1; // error5n_Call – implicit 0 arg call, 1 param
    MYS_B b2 : (); // error5n_Call – explicit 0 arg call, 1 param
    MYS_B b3 : (1); // OK – int coerced to float (no overloading)
    MYS_B b4 : (false); // error5a_Call – not assignable
    MYS_B b5[7]; // error5n_Call – implicit 0 arg call, 1 param
    MYS_B b6[7] : (2.0); // OK – matches ctor
    MYS_B b7[10][10] : (3.0); // ok
    MYS_B b8[true]; // bad
    MYS_B b8[10] : (true, true);
   // MYS_B b8[10] : (2);
   // MYS_B b8[10] : (true);
   // MYS_B b8[10];
    MYS_C c1; // OK – implicit call to default ctor in MYS_C
    MYS_C c1_2[5]; // ok?
    MYS_C c2 : (); // OK – explicit call to default ctor in MYS_C
    MYS_C c3 : (1); // error9_Illegal – no exact overload match
    MYS_C c4 : (1, 2.2); // OK – exact match to overloaded ctor in MYS_C
    MYS_C c5 : (1, 5); // error9_Illegal – no exact overload match
    MYS_C c6 : (1, 2, 3); // error9_Illegal – no exact overload match

    c1_2[2];
    b7[5][5];
}
